{"name":"hitbtc API","tagline":"We bring cutting-edge technology to the Bitcoin ecosystem","body":"# HitBTC API Guide\r\n\r\n## Table of contents\r\n* [SUMMARY](#summary)<br>\r\n  — [Currency symbols](#cursymbols)\r\n* [RESTFUL API](#restful)<br>\r\n  — [Market data](#marketrestful)<br>\r\n  — [Trading](#tradingrestful)<br>\r\n  — [Payment](#paymentsrestful)\r\n* [SOCKET.IO API](#socketio)<br>\r\n  — [Market Data](#socketio)\r\n* [STREAMING API](#streaming)<br>\r\n  — [Market data](#marketstreaming) <br>\r\n  — [Trading](#tradingstreaming)<br>\r\n  — [Sample code](#sample)\r\n\r\n# <a name=\"summary\"/>Summary\r\n\r\nThis document provides the complete reference for [HitBTC](https://hitbtc.com) API.\r\n\r\nHitBTC API has several interfaces to implement them in a custom software:\r\n* <b>RESTful API</b> that allows: \r\n  - access to the market data: get ticker, order book, trades, etc. See [Market data RESTful API](#marketrestful)\r\n  - performing trading operations: get trading balance, place or cancel orders, get history, etc. See [Trading RESTful API](#tradingrestful)\r\n  - managing funds: get balance of the main account, transfer funds between main and trading accounts, create an outgoing  transactions, etc. See [Payment RESTful API](#paymentsrestful)\r\n* <b>socket.io</b> protocol for receiving the market data. socket.io protocol supports WebSocket and xhr-polling  transport. See [socket.io Market Data](#socketio)\r\n* <b>Streaming API</b> based on WebSocket protocol to get an access to: \r\n  - market data. See [Market data streaming end-point](#marketstreaming)  \r\n  - trading operations. See [Trading streaming end-point](#tradingstreaming)\r\n\r\nTrading and payment operations require user's authentication: each request or message should have a signature. \r\nYou should get your API key and Secret key on the [Settings](https://hitbtc.com/settings) page. See details in [RESTful API authentication](#authenticationrestful) and [WebSocket API authentication](#authenticationwebsocket).\r\n\r\n### <a name=\"cursymbols\"/>Currency symbols\r\n\r\nThe following currency symbols are traded on HitBTC exchange.\r\n\r\n| Symbol\t| Lot size | Price step\r\n| --- | --- | --- |\r\n| BTCUSD |\t0.01 BTC |\t0.01 |\r\n| BTCEUR |\t0.01 BTC |\t0.01 |\r\n| LTCBTC | 0.1 LTC |\t0.00001 |\r\n| LTCUSD | 0.1 LTC |\t0.001 |\r\n| LTCEUR | 0.1 LTC |\t0.001 |\r\n| DOGEBTC | 1000 DOGE |\t0.000000001 |\r\n| XMRBTC | 0.01 XMR |\t0.01 |\r\n| BCNBTC | 100 BCN | 0.000000001 |\r\n| XDNBTC | 100 XDN | 0.000000001 |\r\n\r\nThe actual list of symbols can be obtained by [/api/1/public/symbols](#symbols) method.\r\n\r\nSize representation:\r\n* Size values in streaming messages are represented in lots.\r\n* Size values in RESTful market data are represented in money (e.g. in coins or in USD). \r\n* Size values in RESTful trade are represented in lots (e.g. 1 means 0.01 BTC for BTCUSD)\r\n\r\n# <a name=\"restful\"/>RESTful API\r\n\r\nRESTful API provides the most functional access to HitBTC facilities.\r\nRESTful API allows: \r\n  - access to the market data: get ticker, order book, trades, etc. See [Market data RESTful API](#marketrestful)\r\n  - performing trading operations: get trading balance, place or cancel orders, get history, etc. See [Trading RESTful API](#tradingrestful)\r\n  - managing funds: get balance of the main account, transfer funds between main and trading accounts, create an outgoing  transactions, etc. See [Payment RESTful API](#paymentsrestful)\r\n\r\nEndpoint URL: [http://api.hitbtc.com](http://api.hitbtc.com).\r\n\r\nHitBTC provides a <b>demo trading</b> option.  You can enable demo mode and acquire demo API keys on the  [Settings](https://hitbtc.com/settings) page.<br>Demo endpoint address: [http://demo-api.hitbtc.com](http://demo-api.hitbtc.com)\r\n\r\nTrading and payment operations require [authentication](#authentication). See also [error codes](#errors) and [reports representing order status changes](#reports).\r\n\r\n## <a name=\"marketrestful\"/>Market data RESTful API\r\n\r\nRESTful API provides access to the market data with following methods:\r\n  - get the timestamp- [/api/1/public/time](#time)\r\n  - get the list of symbols - [/api/1/public/symbols](#symbols)\r\n  - get the ticker for specified symbol - [/api/1/public/:symbol/ticker](#ticker)\r\n  - get all tickers - [/api/1/public/ticker](#alltickers)\r\n  - get the order book for specified symbol - [/api/1/public/:symbol/orderbook](#orderbook)\r\n  - get individual trades data for specified symbol - [/api/1/public/:symbol/trades](#trades)\r\n  - get recent trades for specified symbol  - [/api/1/public/:symbol/trades/recent](#recenttrades)\r\n\r\n\r\n### <a name=\"time\"/>/api/1/public/time\r\n\r\n<i>Summary:</i> returns the server time in UNIX timestamp format\r\n\r\n<i>Request:</i> `GET /api/1/public/time`\r\n\r\n<i>Example:</i> `/api/1/public/time`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"timestamp\": 1393492619000\r\n}\r\n```\r\n\r\n### <a name=\"symbols\"/>/api/1/public/symbols\r\n\r\n<i>Summary:</i> Simbols returns the actual list of currency symbols traded on HitBTC exchange with their characteristics:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| symbol | Symbol name |\r\n| step | Price step parameter |\r\n| lot | Lot size parameter |\r\n| currency | Value of this symbol |\r\n| commodity | Second value of this symbol |\r\n| takeLiquidityRate | Liquidity taker fee |\r\n| provideLiquidityRate | Liquidity provider rebate |\r\n\r\n<i>Request:</i> `GET /api/1/public/symbols`\r\n\r\n<i>Example:</i> `/api/1/public/symbols`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"symbols\": [\r\n        {\r\n            \"symbol\": \"BTCUSD\",\r\n            \"step\": \"0.01\",\r\n            \"lot\": \"0.01\",\r\n            \"currency\": \"USD\",\r\n            \"commodity\": \"BTC\",\r\n            \"takeLiquidityRate\": \"0.002\",\r\n            \"provideLiquidityRate\": \"0.002\"\r\n        },\r\n        {\r\n            \"symbol\": \"BTCEUR\",\r\n            \"step\": \"0.01\",\r\n            \"lot\": \"0.01\",\r\n            \"currency\": \"EUR\",\r\n            \"commodity\": \"BTC\",\r\n            \"takeLiquidityRate\": \"0.002\",\r\n            \"provideLiquidityRate\": \"0.002\"\r\n        },\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\n### <a name=\"ticker\"/>/api/1/public/:symbol/ticker\r\n\r\n<i>Summary:</i> returns the actual data on exchange rates of the specified cryptocurrency.\r\n\r\nSample usage at HitBTC site: see [https://hitbtc.com/market-overview](https://hitbtc.com/market-overview) for each line.\r\n\r\n<i>Request:</i> `GET /api/1/public/:symbol/ticker`\r\n  where `:symbol` is a currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))\r\n\r\n<i>Example:</i> `/api/1/public/BTCUSD/ticker`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"last\": \"550.73\",\r\n    \"bid\": \"549.56\",\r\n    \"ask\": \"554.12\",\r\n    \"high\": \"600.1\",\r\n    \"low\": \"400.7\",\r\n    \"volume\": \"567.9\",\r\n    \"open\": \"449.73\",\r\n    \"volume_quote\": \"289002.81\",\r\n    \"timestamp\": 1393492619000\r\n    \r\n}\r\n```\r\n\r\nThe following fields are used in the `ticker` object:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| last  | Last price |\r\n| bid | Highest buy order |\r\n| ask | Lowest sell order |\r\n| high | Highest trade price per last 24h + last incomplete minute | \r\n| low | Lowest trade price per last 24h + last incomplete minute |\r\n| volume | Volume per last 24h + last incomplete minute |\r\n| open | Price in which instrument open |\r\n| volume_quote | Volume in second currency per last 24h + last incomplete minute |\r\n| timestamp | Server time in UNIX timestamp format |\r\n\r\n\r\n### <a name=\"alltickers\"/>/api/1/public/ticker\r\n\r\n<i>Summary:</i> returns the actual data on exchange rates for all traded cryptocurrencies - all tickers.\r\n\r\n<i>Example:</i> `/api/1/public/ticker`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"BCNBTC\": {\r\n        \"ask\": \"0.000000039\",\r\n        \"bid\": \"0.000000036\",\r\n        \"last\": \"0.000000037\",\r\n        \"low\": \"0.000000035\",\r\n        \"high\": \"0.000000048\",\r\n        \"volume\": \"580790000\",\r\n        \"volume_quote\": \"26.000000000\",\r\n        \"timestamp\": 1409907025743\r\n    },\r\n    \"BTCEUR\": {\r\n        \"ask\": \"378.23\",\r\n        \"bid\": \"376.28\",\r\n        \"last\": \"376.29\",\r\n        \"low\": \"362.48\",\r\n        \"high\": \"382.13\",\r\n        \"volume\": \"961.71\",\r\n        \"volume_quote\": \"361328.13\",\r\n        \"timestamp\": 1409907025743\r\n    },\r\n    \"BTCUSD\": {\r\n        \"ask\": \"489.26\",\r\n        \"bid\": \"488.08\",\r\n        \"last\": \"489.31\",\r\n        \"low\": \"478.01\",\r\n        \"high\": \"496.23\",\r\n        \"volume\": \"404.20\",\r\n        \"volume_quote\": \"197735.83\",\r\n        \"timestamp\": 1409907025743\r\n    }\r\n    ....\r\n}\r\n```\r\n\r\n### <a name=\"orderbook\"/>/api/1/public/:symbol/orderbook\r\n\r\n<i>Summary:</i> returns a list of open orders for specified currency symbol: their prices and sizes.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>Order book</b> tab.\r\n\r\n<i>Request:</i> `GET /api/1/public/:symbol/orderbook`\r\n  where `:symbol` is a currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `format_price` | No | `string` or `number` | Format of prices returned: as a string (default) or as a number| \r\n| `format_amount` | No | `string` or `number` | Format of amount returned: as a string (default) or as a number|\r\n| `format_amount_unit` | No | `currency` or `lot` | Units of amount returned: in currency units (default) or in lots|\r\n\r\n<i>Alias:</i> `/api/1/request/:symbol/orderbook.json` -> `/api/1/public/:symbol/orderbook?format_price=number&format_amount=number`\r\n\r\n<i>Example:</i> `/api/1/public/BTCUSD/orderbook`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"asks\": [\r\n        [ \"405.71\", \"0.09\" ],\r\n        [ \"406.65\", \"0.06\" ],\r\n        [ \"409.51\", \"0.15\" ],\r\n        [ \"413.93\", \"51.6\" ],\r\n        [ \"414.59\", \"47.1\" ]\r\n    ],\r\n    \"bids\": [\r\n        [ \"398.3\", \"0.15\" ],\r\n        [ \"396.99\", \"0.13\" ],\r\n        [ \"395\", \"0.5\" ],\r\n        [ \"391.93\", \"42.4\" ],\r\n        [ \"383.67\", \"145.4\" ]\r\n    ]\r\n}\r\n```\r\n\r\n<i>Example:</i> `/api/1/public/BTCUSD/orderbook?format_price=number&format_amount=number`\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\r\n    \"asks\": [\r\n        [ 405.71, 0.09 ],\r\n        [ 406.65, 0.06 ],\r\n        [ 409.51, 0.15 ],\r\n        [ 413.93, 51.6 ],\r\n        [ 414.59, 47.1 ]\r\n    ],\r\n    \"bids\": [\r\n        [ 398.3, 0.15 ],\r\n        [ 396.99, 0.13 ],\r\n        [ 395, 0.5 ],\r\n        [ 391.93, 42.4 ],\r\n        [ 383.67, 145.4 ]\r\n    ]\r\n}\r\n```\r\n\r\n### <a name=\"trades\"/>/api/1/public/:symbol/trades\r\n\r\n<i>Summary:</i> returns data on trades for specified currency symbol in specified ID or timestamp interval.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>Market trades</b> tab.\r\n\r\n<i>Request:</i> `GET /api/1/public/:symbol/trades`\r\n  where `:symbol` is a currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Reqired | Type | Description | \r\n| --- | --- | --- | --- |\r\n| `from` | Yes | integer | Returns trades with `trade_id` > specified `trade_id` (if `by=trade_id`) or returns trades with `timestamp` >= specified `timestamp` (if `by=ts`)|\r\n| `till` | No | integer | Returns trades with `trade_id` < specified `trade_id` (if `by=trade_id`) or returns trades with `timestamp` < specified `timestamp` (if `by=ts`)| \r\n| `by` | Yes | `trade_id` or `ts`| Selects if filtering and sorting is performed by trade_id or by timestamp\r\n| `sort` | No| `asc` or `desc`| Trades are sorted ascending (default) or descending|\r\n| `start_index` | Yes| integer | Start index for the query, zero-based |\r\n| `max_results` | Yes| integer | Maximum quantity of returned items, at most 1000|\r\n| `format_item` | No | `array` or `object` | Format of items returned: as an array (default) or as a list of objects |\r\n| `format_price` | No | `string` or `number`| Format of prices returned: as a string (default) or as a number |\r\n| `format_amount` | No | `string` or `number` | Format of amount returned: as a string (default) or as a number  |\r\n| `format_amount_unit` | No | `currency` or `lot` | Units of amount returned: in currency units (default) or in lots|\r\n| `format_tid` | No | `string` or `number`| Format of trade ID returned: as a string or as a number (default)|\r\n| `format_timestamp` | No | `millisecond` or `second` | Format of trade timestamp returned: in milliseconds (default) or in seconds|\r\n| `format_wrap `| No | `true` or `false` | Selects if the line wrappnig is used in item returned. Default value - `true`|\r\n| `side` | No | `true` or `false` | Selects if the side of a trade is returned|\r\n\r\n<i>Alias:</i>\r\n```\r\n/api/1/request/:symbol/trades.json?since=<trade_id> -> /api/1/public/:symbol/trades?from=<trade_id>&by=trade_id&start_index=0&format_numbers=number&format_tradeid=string&format_objects=object&format_timestamp=second\r\n```\r\n\r\n<i>Example:</i>\r\n```\r\n/api/1/public/BTCUSD/trades?from=0&by=trade_id&sort=desc&start_index=0&max_results=100\r\n```\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\r\n    \"trades\": [\r\n        [ 3814483, \"575.64\", \"0.02\", 1393492619000 ],\r\n        [ 3814482, \"574.3\", \"0.12\", 1393492619000 ],\r\n        [ 3814481, \"573.67\", \"3.8\", 1393492619000 ],\r\n        [ 3814479, \"571\", \"0.01\", 1393492619000 ],\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\n\r\n<i>Example:</i>\r\n\r\n```\r\n/api/1/public/BTCUSD/trades?from=0&by=trade_id&sort=desc&start_index=0&max_results=100&format_item=object&format_price=number&format_amount=number&format_tid=string&format_timestamp=second&format_wrap=false\r\n```\r\n<i>Example response:</i>\r\n\r\n``` json\r\n[\r\n    {\"date\": 1393492619, \"price\": 575.64, \"amount\": 0.02, \"tid\": \"3814483\"},\r\n    {\"date\": 1393492619, \"price\": 574.3, \"amount\": 0.12, \"tid\": \"3814482\"},\r\n    {\"date\": 1393492619, \"price\": 573.67, \"amount\": 3.8, \"tid\": \"3814481\"},\r\n    {\"date\": 1393492619, \"price\": 571, \"amount\": 0.01, \"tid\": \"3814479\"},\r\n    ...\r\n]\r\n```\r\n\r\n### <a name=\"recenttrades\"/>/api/1/public/:symbol/trades/recent\r\n\r\n<i>Summary:</i> returns recent trades for the specified currency symbol.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>Market trades</b> tab. Select the currency pair at top of the tab.\r\n\r\n<i>Request:</i> `/api/1/public/:symbol/trades/recent`\r\n  where `:symbol` is a currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `max_results` | Yes | integer | Maximum quantity of returned results, at most 1000 |\r\n| `format_item` | No | `array` or `object` | Format of items returned: as an array (default) or as a list of objects|\r\n| `side` | No | `true` or `false` | Selects if the side of a trade is returned|\r\n\r\n<i>Example:</i> \r\n```\r\n/api/1/public/LTCEUR/trades/recent?max_results=100&format_item=object\r\n```\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\"trades\":[\r\n  {\"date\":1411045690003,\"price\":\"442.12\",\"amount\":\"0.09\",\"tid\":1413901,\"side\":\"buy\"},\r\n  {\"date\":1411045690003,\"price\":\"442.02\",\"amount\":\"0.60\",\"tid\":1413900,\"side\":\"buy\"},\r\n  {\"date\":1411045690003,\"price\":\"441.57\",\"amount\":\"0.19\",\"tid\":1413899,\"side\":\"buy\"},\r\n  {\"date\":1411045635556,\"price\":\"442.00\",\"amount\":\"0.42\",\"tid\":1413889,\"side\":\"buy\"},\r\n  {\"date\":1411045635556,\"price\":\"441.59\",\"amount\":\"0.19\",\"tid\":1413888,\"side\":\"buy\"},\r\n  {\"date\":1411045635556,\"price\":\"441.59\",\"amount\":\"0.39\",\"tid\":1413887,\"side\":\"buy\"},\r\n  {\"date\":1411045621329,\"price\":\"442.00\",\"amount\":\"0.01\",\"tid\":1413882,\"side\":\"buy\"},\r\n  {\"date\":1411045621329,\"price\":\"442.00\",\"amount\":\"0.32\",\"tid\":1413881,\"side\":\"buy\"},\r\n  {\"date\":1411045621329,\"price\":\"441.57\",\"amount\":\"0.28\",\"tid\":1413880,\"side\":\"buy\"},\r\n  {\"date\":1411045621329,\"price\":\"441.56\",\"amount\":\"0.38\",\"tid\":1413879,\"side\":\"buy\"}\r\n]\r\n```\r\n\r\n## <a name=\"tradingrestful\"/>Trading RESTful API\r\n\r\nRESTful API allows to perform trading operations with the following methods:\r\n  - get the trading balance - [/api/1/trading/time](#tradingbalance)\r\n  - get all active orders  - [/api/1/trading/active](#active)\r\n  - place a new order - [/api/1/trading/new_order](#neworder)\r\n  - cancel an order - [/api/1/trading/cancel_order](#cancelorder)\r\n  - get user's recent orders - [/api/1/trading/recent](#recentorders)\r\n  - get user's trading history - [/api/1/trading/trades](#usertrades)\r\n\r\nTrading operations require [authentication](#authentication).\r\n\r\n[Error codes](#errors) and [reports representing order status changes](#reports) are described below.\r\n\r\n\r\n### <a name=\"authenticationrestful\"/>Authentication\r\n\r\nRESTful Trading API requires HMAC-SHA512 signatures for each request.\r\n\r\nTo use this API endpoint you should get your API key and Secret key from the [Settings](https://hitbtc.com/settings) page. \r\n\r\nEach request should include the following parameters:\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `nonce` | Yes | query string parameter, less than (2^53-1) | Unique monotonous number that should be generated on the client. Hint: use millisecond or microsecond timestamp | \r\n| `apikey` | Yes | query string parameter | API key from [Settings](https://hitbtc.com/settings) page|\r\n| `signature` | Yes | _lower-case_ hex representation of hmac-sha512 of concatenated `uri` and `postData` | This parameter should be added as a HTTP header `X-Signature`| \r\n\r\nSignature generation pseudo-code:\r\n\r\n```\r\nuri = path + '?' + query (example: /api/1/trading/orders/active?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d&symbols=BTCUSD)\r\nmessage = uri + postData\r\nsignature = lower_case(hex(hmac_sha512(message, secret_key)))\r\n```\r\n\r\nJavascript code (example):\r\n``` js\r\n   var crypto = require('crypto');\r\n\r\n   ...\r\n\r\n   var signature = crypto.createHmac('sha512', secretKey).update(message).digest('hex');\r\n```\r\n\r\nUseful examples provided by the community:\r\n* C# example code: https://gist.github.com/hitbtc-com/9808530\r\n* PHP example code: https://gist.github.com/hitbtc-com/10885873 \r\n\r\n### <a name=\"errors\"/>Error codes\r\n\r\nTrading RESTful API can return the following errors:\r\n\r\n| HTTP code | Text | Description |\r\n| --- | --- | --- |\r\n| 403 | Invalid API key | API key doesn't exist or API key is currently used on another endpoint (max last 15 min) |\r\n| 403 | Nonce has been used | Nonce is not monotonous |\r\n| 403 | Nonce is not valid | Too big number or not a number |\r\n| 403 | Wrong signature | Specified signature is not correct|\r\n\r\n### <a name=\"reports\"/>Execution reports\r\n\r\nThe API uses `ExecutionReport` as an object that represents change of order status.\r\n\r\nThe following fields are used in `ExecutionReport` object:\r\n\r\n| Field\t| Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `orderId` | Yes | string | Order ID on the Exchange|\r\n| `clientOrderId` | Yes | string | `clientOrderId` sent in `NewOrder` message (see [/api/1/trading/new_order](#neworder)) |\r\n| `execReportType` | Yes | `new` <br> `canceled` <br> `rejected` <br> `expired` <br> `trade` <br> `status` | Execution report type |\r\n| `orderStatus` | Yes | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `rejected` <br> `expired` | Order status |\r\n| `orderRejectReason` | Yes - for orders in `rejected` state| `unknownSymbol` <br> `exchangeClosed` <br>`orderExceedsLimit` <br> `unknownOrder` <br> `duplicateOrder` <br> `unsupportedOrder` <br> `unknownAccount` <br> `other`|Reason of rejection. Relevant only for orders in rejected state |\r\n| `symbol` | Yes | string, e.g. `BTCUSD` | Currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))|\r\n| `side` | Yes| `buy` or `sell` | Side of a trade |\r\n| `timestamp` | No | integer | UTC timestamp in milliseconds |\r\n| `price` | No | decimal | Price of an order|\r\n| `quantity` | Yes | integer | Order quantity in lots |\r\n| `type` | Yes| `limit` | Type of an order. Only `limit` orders are currently supported |\r\n| `timeInForce` | Yes | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day orders< | Time in force |\r\n| `tradeId` | Yes - for trades| integer | Trade ID on the exchange |\r\n| `lastQuantity` | Yes - for trades | integer | Last quantity |\r\n| `lastPrice` | Yes - for trades | decimal | Last price  |\r\n| `leavesQuantity` | No | integer |  Leaves quantity|\r\n| `cumQuantity` | No | integer | Cumulative quantity |\r\n| `averagePrice` | No | decimal | Average price. Equals 0 if `cumQuantity`=0|\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{ \"ExecutionReport\": { \r\n   \"orderId\": \"5852103\",\r\n   \"clientOrderId\": \"11111112\",\r\n   \"execReportType\": \"new\",\r\n   \"orderStatus\": \"new\",\r\n   \"symbol\": \"BTCUSD\",\r\n   \"side\": \"buy\",\r\n   \"timestamp\": 1395236779235,\r\n   \"price\": 0.1,\r\n   \"quantity\": 100,\r\n   \"type\": \"limit\",\r\n   \"timeInForce\": \"GTC\",\r\n   \"lastQuantity\": 0,\r\n   \"lastPrice\": 0,\r\n   \"leavesQuantity\": 100,\r\n   \"cumQuantity\": 0,\r\n   \"averagePrice\": 0 \r\n} }\r\n```\r\n\r\n\r\n### <a name=\"tradingbalance\"/>/api/1/trading/balance\r\n\r\n<i>Summary:</i> returns trading balance.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), the upper panel, <i>Trading</i> line. The black number displays total trade balance of the currency (`cash` parameter), the gray number is amount reserved against unexecuted orders and unfinished transactions (`reserved` parameter).\r\n\r\n<i>Request:</i> `GET /api/1/trading/balance`\r\n\r\n<i><i>Parameters:</i></i> no parameters\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{\"balance\": [\r\n  {\"currency_code\": \"BTC\",\"cash\": 0.045457701,\"reserved\": 0.01},\r\n  {\"currency_code\": \"EUR\",\"cash\": 0.0445544,\"reserved\": 0},\r\n  {\"currency_code\": \"LTC\",\"cash\": 0.7,\"reserved\": 0.1},\r\n  {\"currency_code\": \"USD\",\"cash\": 2.9415029,\"reserved\": 1.001}\r\n]}\r\n```\r\n\r\n### <a name=\"active\"/>/api/1/trading/orders/active\r\n\r\n<i>Summary:</i> returns all orders in status `new` or `partiallyFilled`.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>My orders</b> tab, <b>Active</b> group.\r\n\r\n<i>Request:</i> `GET /api/1/trading/orders/active`\r\n\r\n<i>Parameters:</i> \r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `symbols` | No | string | Comma-separated list of symbols. Default - all symbols|\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\"orders\": [\r\n  {\r\n    \"orderId\": \"51521638\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1394798401494,\r\n    \"orderPrice\": 1000,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"cumQuantity\": 0,\r\n    \"clientOrderId\": \"7fb8756ec8045847c3b840e84d43bd83\",\r\n    \"symbol\": \"LTCBTC\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 0\r\n  }\r\n]}\r\n```\r\n\r\n### <a name=\"neworder\"/>/api/1/trading/new_order\r\n\r\n<i>Summary:</i> place a new order. Returns a JSON object `ExecutionReport` that respresent a status of the order.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>Sell Order</b> and <b>Buy Order</b> panels.\r\n\r\n<i>Request:</i> `POST /api/1/trading/new_order`\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required| Type | Description |\r\n| --- | --- | --- | --- |\r\n| `clientOrderId` | Yes | string | Unique order ID generated by client. From 8 to 32 characters |\r\n| `symbol` | Yes| string | Currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols)), e.g. `BTCUSD` |\r\n| `side` | Yes | `buy` or `sell`| Side of a trade |\r\n| `price` | Yes - for limit orders | decimal | Order price |\r\n| `quantity` | No | integer | Order quantity in lots |\r\n| `type` | No | `limit` or `market` | Order type |\r\n| `timeInForce` | No | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day | Time in force. Default value - `GTC` |\r\n\r\n<i>Example:</i>\r\n\r\n```\r\npost url: /api/1/trading/new_order?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d\r\npost data: clientOrderId=11111112&symbol=BTCUSD&side=buy&price=0.1&quantity=100&type=limit&timeInForce=GTC\r\n```\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{ \"ExecutionReport\": \r\n   { \"orderId\": \"58521038\",\r\n     \"clientOrderId\": \"11111112\",\r\n     \"execReportType\": \"new\",\r\n     \"orderStatus\": \"new\",\r\n     \"symbol\": \"BTCUSD\",\r\n     \"side\": \"buy\",\r\n     \"timestamp\": 1395236779235,\r\n     \"price\": 0.1,\r\n     \"quantity\": 100,\r\n     \"type\": \"limit\",\r\n     \"timeInForce\": \"GTC\",\r\n     \"lastQuantity\": 0,\r\n     \"lastPrice\": 0,\r\n     \"leavesQuantity\": 100,\r\n     \"cumQuantity\": 0,\r\n     \"averagePrice\": 0 } }\r\n```\r\n\r\n### <a name=\"cancelorder\"/>/api/1/trading/cancel_order\r\n\r\n<i>Summary:</i> cancels an order. Returns `ExecutionReport` JSON object or `CancelReject` JSON object.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>My Orders</b> tab. Click <b>Cancel</b> button in required order line.\r\n\r\n<i>Request:</i> `POST /api/1/trading/cancel_order`\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required| Type | Description |\r\n| --- | --- | --- | ---| \r\n| `clientOrderId` | Yes | string | Order ID, the same as in cancelling order, from 8 to 32 characters|\r\n| `cancelRequestClientOrderId` | Yes | string | Unqiue ID generated by client, from 8 to 32 characters|\r\n| `symbol` | Yes | string | Currency symbol, the same as in cancelling order |\r\n| `side` | Yes | `buy` or `sell`| Side of a trade, the same as in cancelling order |\r\n\r\n<i>Example:</i>\r\n\r\n```\r\npost url: /api/1/trading/cancel_order?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d\r\npost data: clientOrderId=11111112&cancelRequestClientOrderId=38257825798349578945&symbol=BTCUSD&side=buy\r\n```\r\n\r\n<i>Example response:</i>\r\n``` json\r\n{ \"ExecutionReport\": \r\n   { \"orderId\": \"58521038\",\r\n     \"clientOrderId\": \"11111112\",\r\n     \"execReportType\": \"canceled\",\r\n     \"orderStatus\": \"canceled\",\r\n     \"symbol\": \"BTCUSD\",\r\n     \"side\": \"buy\",\r\n     \"timestamp\": 1395236779346,\r\n     \"price\": 0.1,\r\n     \"quantity\": 100,\r\n     \"type\": \"limit\",\r\n     \"timeInForce\": \"GTC\",\r\n     \"lastQuantity\": 0,\r\n     \"lastPrice\": 0,\r\n     \"leavesQuantity\": 0,\r\n     \"cumQuantity\": 0,\r\n     \"averagePrice\": 0 } }\r\n```\r\n\r\n`CancelReject` example:\r\n\r\n``` json \r\n{ \"CancelReject\": { \r\n    \"cancelRequestClientOrderId\": \"011111112\",\r\n    \"clientOrderId\": \"11111112\",\r\n    \"rejectReasonCode\": \"orderNotFound\" \r\n} }\r\n```\r\n\r\n### <a name=\"recentorders\"/>/api/1/trading/orders/recent\r\n\r\n<i>Summary:</i> returns an array of user's recent orders (`order` objects) for last 24 hours, sorted by order update time.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>My orders</b> tab.\r\n\r\n<i>Request:</i> `GET /api/1/trading/orders/recent`\r\n\r\n<i><i>Parameters:</i></i> \r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | ---|\r\n| `start_index` | No | integer | Zero-based index, 0 by default |\r\n| `max_results` | Yes | integer | Maximum quantity of returned items, at most 1000 |\r\n| `sort` | No | `asc` or `desc` | Orders are sorted ascending (default) or descending |\r\n| `symbols` | No | string | Comma-separated list of currency symbols |\r\n| `statuses` | No | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `expired` <br> `rejected` | Comma-separated list of order statuses |\r\n\r\nThe following fields are used in `order` object:\r\n\r\n| Field\t| Required | Type | Description |\r\n| --- | --- | --- | ---|\r\n| `orderId` | No | integer | Order ID on the exchange |\r\n| `orderStatus` | No | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `expired` <br> `rejected` | Order status |\r\n| `lastTimestamp` | Yes | integer | UTC timestamp of the last change, in milliseconds |\r\n| `orderPrice` | Yes - for limit orders | decimal | Order price | \r\n| `orderQuantity` | Yes | integer | Order quantity, in lots |\r\n| `avgPrice` | Yes | decimal | Average price | \r\n| `quantityLeaves` | Yes | integer | Remaining quantity, in lots | \r\n| `type` | No | `limit` or `market` | Type of an order |\r\n| `timeInForce` | No | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day | Time in force |\r\n| `clientOrderId` | No | string | Unique client-generated ID |\r\n| `symbol` | No | string | Currency symbol |\r\n| `side` | No | `buy` or `sell` | Side of a trade |\r\n| `execQuantity` | No | integer | Last executed quantity, in lots |\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\"orders\": [\r\n  {\r\n    \"orderId\": \"1\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1395659434845,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111111\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 0\r\n  },\r\n  {\r\n    \"orderId\": \"2\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1395664550770,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111112\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 0\r\n  },\r\n  {\r\n    \"orderId\": \"3\",\r\n    \"orderStatus\": \"canceled\",\r\n    \"lastTimestamp\": 1395664737500,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111113\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 0\r\n  }\r\n]}\r\n```\r\n\r\n\r\n### <a name=\"usertrades\"/>/api/1/trading/trades\r\n\r\n<i>Summary:</i> returns the trading history - an array of user's trades (`trade` objects).\r\n\r\n<i>Sample usage at HitBTC site:</i> [https://hitbtc.com/trading-history](https://hitbtc.com/trading-history). Trades for preceding 24 hours see [https://hitbtc.com/terminal](https://hitbtc.com/terminal), <b>My trades</b> tab. \r\n\r\n<i>Request:</i> `GET /api/1/trading/trades`\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `by` | Yes |  `trade_id` or `ts` | Selects if filtering and sorting is performed by `trade_id` or by `timestamp` |\r\n| `start_index` | Yes | integer | Zero-based index. Default value is 0 |\r\n| `max_results` | Yes | integer | Maximum quantity of returned results, at most 1000 |\r\n| `symbols` | No | string | Comma-separated list of currency symbols |\r\n| `sort` | No | `asc` or `desc` | Trades are sorted ascending (default) or descending |\r\n| `from` | No | integer | Returns trades with `trade_id` > specified `trade_id` (if `by=trade_id`) or returns trades with `timestamp` >= specified timestamp` (if `by=ts`) |\r\n| `till` | No | integer | Returns trades with `trade_id` < specified `trade_id` (if `by=trade_id`) or returns trades with `timestamp` < specified `timestamp` (if `by=ts`)|\r\n\r\nThe following fields are used in `trade` object:\r\n\r\n| Field\t|Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `tradeId` | Yes | integer | Trade ID on the exchange |\r\n| `execPrice` | Yes | decimal | Trade price | \r\n| `timestamp` |  Yes | integer | Timestamp, in milliseconds |\r\n| `originalOrderId` | No | integer | Order ID on the exchange |\r\n| `fee` | No | decimal | Fee for the trade, negative value means rebate |\r\n| `clientOrderId` | No | string | Unique order ID generated by client. From 8 to 32 characters |\r\n| `symbol` | No | string | Currency symbol |\r\n| `side` | No | `buy` or `sell` | Side of a trade |\r\n| `execQuantity` | No | integer | Trade size, in lots |\r\n\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\"trades\": [\r\n  {\r\n    \"tradeId\": 39,\r\n    \"execPrice\": 150,\r\n    \"timestamp\": 1395231854030,\r\n    \"originalOrderId\": \"114\",\r\n    \"fee\": 0.03,\r\n    \"clientOrderId\": \"FTO18jd4ou41--25\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 38,\r\n    \"execPrice\": 140.1,\r\n    \"timestamp\": 1395231853882,\r\n    \"originalOrderId\": \"112\",\r\n    \"fee\": 0.028,\r\n    \"clientOrderId\": \"FTO18jd4ou3n--15\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 2,\r\n    \"execPrice\": 150,\r\n    \"timestamp\": 1394789991659,\r\n    \"originalOrderId\": \"24\",\r\n    \"fee\": 0.03,\r\n    \"clientOrderId\": \"FTO18ivvcbvt--25\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 1,\r\n    \"execPrice\": 140,\r\n    \"timestamp\": 1394789991527,\r\n    \"originalOrderId\": \"22\",\r\n    \"fee\": 0.028,\r\n    \"clientOrderId\": \"FTO18ivvcbvj--15\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 10\r\n  }\r\n]}\r\n```\r\n\r\n\r\n## <a name=\"paymentsrestful\"/>Payment RESTful API\r\n\r\nRESTful API allows to manage funds with the following methods:\r\n  - get multi-currency balance of the main account - [/api/1/payment/balance](#paymentbalance)\r\n  - transfer funds between main and trading accounts - [/api/1/payment/transfer_to_trading, /api/1/payment/transfer_to_main](#transfer)\r\n  - get the last created incoming cryptocurrency address or create a new one -  [/api/1/payment/address/ (GET)](#getaddress), [/api/1/payment/address/ (POST)](#postaddress),\r\n  - create an outgoing crypotocurrency transaction - [/api/1/payment/payout](#payout)\r\n  - get a list of payment transactions - [/api/1/payment/transactions](#transactions)\r\n \r\nPayment operations require [authentication](#authentication)\r\n\r\n### <a name=\"paymentbalance\"/>/api/1/payment/balance\r\n\r\n<i>Summary:</i> returns multi-currency balance of the main account.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account).\r\n\r\n<i>Request:</i> `GET /api/1/payment/balance`\r\n\r\n<i><i>Parameters:</i></i> no parameters\r\n\r\n<i>Example response:</i>\r\n\r\n``` json\r\n{\r\n  \"balance\": [\r\n  {\r\n    \"currency_code\": \"USD\",\r\n    \"balance\": 13.12\r\n  },\r\n  {\r\n    \"currency_code\": \"EUR\",\r\n    \"balance\": 0\r\n  },\r\n  {\r\n    \"currency_code\": \"LTC\",\r\n    \"balance\": 1.07\r\n  }, \r\n  {\"currency_code\": \"BTC\", \r\n  \"balance\": 11.9\r\n  }\r\n]}\r\n```\r\n\r\n### <a name=\"transfer\"/>/api/1/payment/transfer_to_trading and /api/1/payment/transfer_to_main\r\n\r\n<i>Request:</i> `POST /api/1/payment/transfer_to_trading, /api/1/payment/transfer_to_main`\r\n\r\n<i>Summary:</i> transfers funds between main and trading accounts; returns a transaction ID or an error.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account). Click the appropriate arrow in the currency line then specify required amount and click <b>Transfer</b> button.\r\n\r\n<i><i>Parameters:</i></i>\r\n\r\n| Parameter |Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `amount` | Yes | decimal | Funds amount to transfer |\r\n| `currency_code` | Yes | string | Currency symbol, e.g. `BTC` |\r\n\r\n<i>Example responses:</i>\r\n\r\n```json\r\n{\"message\": \"Balance not enough\", \"statusCode\": 409, \"body\": \"Balance not enough\"}\r\n```\r\n\r\n```json\r\n{\"transaction\": \"52976-103925-18443984\"}\r\n```\r\n\r\n### <a name=\"getaddress\"/>/api/1/payment/address/ (GET)\r\n\r\n<i>Summary:</i> returns the last created incoming cryptocurrency address that can be used to deposit cryptocurrency to your account. \r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account). In the required currency line click <b>Fund</b> icon then click <b>copy address</b> link.\r\n\r\n<i>Request:</i> `GET /api/1/payment/address/:currency`\r\n\r\n<i><i>Parameters:</i></i> no parameters\r\n\r\n<i>Example:</i> `GET /api/1/payment/address/BTC`\r\n\r\n<i>Example response:</i>\r\n\r\n```json\r\n{\"address\":\"1HDtDgG9HYpp1YJ6kFYSB6NgaG2haKnxUH\"}\r\n```\r\n\r\n### <a name=\"postaddress\"/>/api/1/payment/address/ (POST)\r\n\r\n<i>Summary:</i> creates an address that can be used to deposit cryptocurrency to your account; returns a new cryptocurrency address.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account). In the required currency line click <b>Fund</b> icon then click <b>create new address</b> link.\r\n\r\n<i>Request:</i> `POST /api/1/payment/address/:currency`\r\n\r\n<i><i>Parameters:</i></i> no parameters\r\n\r\n<i>Example:</i> `POST /api/1/payment/address/BTC`\r\n\r\n<i>Example response:</i>\r\n\r\n```json\r\n{\"address\":\"1HDtDgG9HYpp1YJ6kFYSB6NgaG2haKnxUH\"}\r\n```\r\n\r\n### <a name=\"payout\"/>/api/1/payment/payout\r\n\r\n<i>Summary:</i> withdraws money and creates an outgoing crypotocurrency transaction; returns a transaction ID on the exchange or an error.\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account). In the required currency line click <b>Fund</b> icon then click <b>copy address</b> link.\r\n\r\n<i>Request:</i> `POST /api/1/payment/payout`\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `amount` | Yes | decimal | Funds amount to withdraw |\r\n| `currency_code` | Yes | string | Currency symbol, e.g. `BTC`|\r\n| `address` | Yes | string | BTC/LTC address to withdraw to |\r\n\r\n<i>Example:</i> ```amount=0.001&currency_code=BTC&address=1LuWvENyuPNHsHWjDgU1QYKWUYN9xxy7n5```\r\n\r\n<i>Example response:</i>\r\n```json\r\n{\"transaction\": \"51545-103004-18442681\"}\r\n```\r\n\r\n### <a name=\"transactions\"/>/api/1/payment/transactions\r\n\r\n<i>Summary:</i> returns a list of payment transactions and their statuses (array of transactions).\r\n\r\n<i>Sample usage at HitBTC site:</i> see [https://hitbtc.com/account](https://hitbtc.com/account), <b>History</b> panel.\r\n\r\n<i>Request:</i> `GET /api/1/payment/transactions`\r\n\r\n<i>Parameters:</i>\r\n\r\n| Parameter | Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `offset` | No | integer | Start index for the query, default = 0 |\r\n| `limit` | Yes | integer | Maximum results for the query |\r\n| `dir` | No | `ask` or `desc` | Transactions are sorted ascending or descending (default) |\r\n\r\n<i>Example response:</i>\r\n```json\r\n{\"transactions\": [\r\n  {\r\n    \"id\": \"49720-104765-18440728\",\r\n    \"type\": \"payin\",\r\n    \"status\": \"pending\",\r\n    \"created\": 1397056648,\r\n    \"finished\": 1397056646,\r\n    \"amount_from\": 0.001,\r\n    \"currency_code_from\": \"BTC\",\r\n    \"amount_to\": 0.001,\r\n    \"currency_code_to\": \"BTC\",\r\n    \"destination_data\": null,\r\n    \"commission_percent\": 0,\r\n    \"bitcoin_address\": \"1KnVXD1Wc1wZbTHiB1TDgMcnSRi2PnMHAV\",\r\n    \"bitcoin_return_address\": \"1QBuhFksjoWTQWJKWUPyQ37wsQohLAhJvK\"\r\n  }\r\n]}\r\n```\r\n\r\n\r\n# <a name=\"socketio\"/>socket.io Market Data\r\n\r\nThe API provides socket.io version 1.0.x protocol for receiving market data. It supports:\r\n* WebSocket and xhr-polling transport\r\n* multiplexing a single connection with socket.io namespaces (see [`trades` namespace](#tradesnamespace))\r\n\r\nUseful links:\r\n* official socket.io documentation - `http://socket.io/`\r\n* chrome extension Simple WebSocket Client - `https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo`. See also the [Sample code](#sample)\r\n\r\nAPI links:\r\n* socket.io URL: `http://api.hitbtc.com:8081`\r\n* socket.io demo URL: `http://demo-api.hitbtc.com:8081`\r\n* live example (both demo and primary API): `http://jsfiddle.net/rn7zy75n/1/`\r\n\r\n### <a name=\"tradesnamespace\"/>`trades` namespace\r\n\r\n<i>Namespace:</i> `trades`\r\n\r\n<i>URLs:</i> `/trades/:symbol` e.g. `/trades/BTCUSD`\r\n\r\n<i>Event:</i> `trade`\r\n\r\n<i>Event example:</i>\r\n```json\r\n{\"price\":478.33,\"amount\":0.15}\r\n```\r\n\r\n\r\n# <a name=\"streaming\"/>Streaming API\r\n\r\nStreaming API is based on [WebSocket protocol](http://en.wikipedia.org/wiki/WebSocket). All messages are in JSON format.\r\n\r\nStreaming API provides an access to: \r\n  - market data. See [Market data streaming end-point](#marketstreaming)  \r\n  - trading operations. See [Trading streaming end-point](#tradingstreaming)\r\n\r\n\r\n## <a name=\"marketstreaming\"/>Market data streaming end-point\r\n\r\nAPI links:\r\n* URL: <ws://api.hitbtc.com:80>\r\n* Demo URL: <ws://demo-api.hitbtc.com:80>\r\n\r\nOnce client connects to this URL the session is started. \r\n\r\nThe server broadcasts the following types of messages:\r\n* [MarketDataSnapshotFullRefresh](#MarketDataSnapshotFullRefresh) message contains a full snapshot of the order book.\r\n* [MarketDataIncrementalRefresh](#MarketDataIncrementalRefresh) message contains incremental changes\r\n\r\nSome recommendations to consider:\r\n* The application could receive the first snapshot and maintain the order book by applying incremental updates.\r\n* It's recommended to invalidate a state of the application periodically using snapshots.\r\n* It's recommended to check sequence numbers and to drop updates with non-monotonous sequence numbers.\r\n\r\n### <a name=\"MarketDataSnapshotFullRefresh\"/>MarketDataSnapshotFullRefresh message\r\n\r\n<i>Summary:</i> contains a full snapshot of the order book.\r\n\r\n<i>Example message:</i>\r\n```json\r\n{\"MarketDataSnapshotFullRefresh\": {\r\n    \"snapshotSeqNo\": 899009,\r\n    \"symbol\": \"BTCUSD\",\r\n    \"exchangeStatus\": \"working\",\r\n    \"ask\": [\r\n        {\r\n            \"price\": 101.42,\r\n            \"size\": 7\r\n        },\r\n        {\r\n            \"price\": 101.85,\r\n            \"size\": 5\r\n        },\r\n        {\r\n            \"price\": 102.59,\r\n            \"size\": 1\r\n        },\r\n        {\r\n            \"price\": 114.53,\r\n            \"size\": 3\r\n        },\r\n        {\r\n            \"price\": 114.54,\r\n            \"size\": 6\r\n        },\r\n        {\r\n            \"price\": 114.55,\r\n            \"size\": 19\r\n        }\r\n    ],\r\n    \"bid\": [\r\n        {\r\n            \"price\": 89.72,\r\n            \"size\": 79\r\n        },\r\n        {\r\n            \"price\": 89.71,\r\n            \"size\": 158\r\n        },\r\n        {\r\n            \"price\": 89.7,\r\n            \"size\": 166\r\n        },\r\n        {\r\n            \"price\": 89.69,\r\n            \"size\": 231\r\n        },\r\n        {\r\n            \"price\": 89.68,\r\n            \"size\": 169\r\n        },\r\n        {\r\n            \"price\": 89.67,\r\n            \"size\": 186\r\n        },\r\n        {\r\n            \"price\": 89.66,\r\n            \"size\": 178\r\n        }\r\n    ]\r\n}}\r\n```\r\n\r\nThe following fields are used in `MarketDataSnapshotFullRefresh` object:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| `seqNo` | Monotone increasing number of the snapshot, each symbol has its own sequence |\r\n| `timestamp` | UTC timestamp, in milliseconds |\r\n| `symbol` | Currency symbol traded on HitBTC exchange |\r\n| `exchangeStatus` | Exchange status: `on` - trading is open; `off` - trading is suspended |\r\n| `ask`, `bid` | Sorted arrays of price levels in the order book; full snapshot (all price levels) is provided |\r\n\r\n### <a name=\"MarketDataIncrementalRefresh\"/>MarketDataIncrementalRefresh message\r\n\r\n<i>Summary:</i> contains incremental changes of the order book and individual trades.\r\n\r\n<i>Example message:</i>\r\n```json\r\n{\"MarketDataIncrementalRefresh\": {\r\n    \"seqNo\": 546693,\r\n    \"timestamp\": 1381394357861,\r\n    \"symbol\": \"BTCUSD\",\r\n    \"exchangeStatus\": \"on\",\r\n    \"ask\": [],\r\n    \"bid\": [\r\n        {\r\n            \"price\": 100.98,\r\n            \"size\": 3\r\n        }\r\n    ],\r\n    \"trade\": [\r\n        {\r\n            \"price\": 100.98,\r\n            \"size\": 5,\r\n            \"timestamp\": 1346691273926\r\n        }\r\n    ]\r\n}}\r\n```\r\n\r\nThe following fields are used in `MarketDataIncrementalRefresh` object:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| `seqNo`\t| Monotone increasing number of the snapshot, each symbol has its own sequence |\r\n| `timestamp` |\tUTC timestamp, in milliseconds |\r\n| `symbol`\t| Currency symbol traded on HitBTC exchange |\r\n| `exchangeStatus` |  Exchange status: `on` - trading is open; `off` - trading is suspended |\r\n| `ask`, `bid`, `trade` | An array of changes in the order book where `price` is a price, `size` is new size. `size`=0 means that the price level has been removed |\r\n\r\n\r\n## <a name=\"tradingstreaming\"/>Trading streaming end-point\r\n\r\nAPI links:\r\n* URL: <wss://api.hitbtc.com:8080>\r\n* Demo URL: <ws://demo-api.hitbtc.com:8080>\r\n\r\nTrading endpoint requires sending login message after connection established. All client messages should be signed and should contain valid and active API key (see [API keys and message signatures](#authenticationwebsocket)).\r\n\r\n\r\nThe following message types are supported:\r\n\r\n| Type |  |\r\n| --- | --- | --- |\r\n| [Login](#Login) | Client -> Server |\r\n| [NewOrder](#NewOrder) | Client -> Server |\r\n| [OrderCancel](#OrderCancel) | Client -> Server  |\r\n| [ExecutionReport](#ExecutionReport) | Server -> Client |\r\n| [CancelReject](#CancelReject) | Server -> Client |\r\n\r\n\r\n### <a name=\"authenticationwebsocket\"/>API keys and message signatures\r\n\r\nAll client messages should be signed in the following manner:\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"Login\": {}\r\n        }\r\n    }\r\n}\r\n```\r\n<i>Fields:</i>\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n|`nonce` | Unique monotonous number that should be generated on the client. Should be monotonous within the same connection |\r\n| `signature` | Signature - hash-based message authentication code: base64 [hmac-sha512](http://en.wikipedia.org/wiki/Hash-based_message_authentication_code) (binary representation of the message) |\r\n\r\n### <a name=\"Login\"/>Login \r\n\r\n<i>Example:</i>\r\n```json\r\n{\r\n\t\"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n\t\"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n\t\"message\":{\r\n\t\t\"nonce\": 12, \r\n\t\t\"payload\": {\r\n\t\t\t\"Login\": {}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n<i><i>Parameters:</i></i> no parameters\r\n\r\nIf client doesn't send valid logon message in 10 second the connection will be dropped.\r\n\r\n### <a name=\"NewOrder\"/>NewOrder\r\n\r\n<i>Example:</i>\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"NewOrder\": {\r\n                \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n                \"symbol\": \"BTCUSD\",\r\n                \"side\": \"buy\",\r\n                \"quantity\": 10,\r\n                \"type\": \"limit\",\r\n                \"price\": 788.12,\r\n                \"timeInForce\": \"GTC\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<i><i>Parameters:</i></i>\r\n\r\n| Parameter\t| Type | Description |\r\n| --- | --- | --- | \r\n| `clientOrderId` | string  | Unique order ID generated by client. From 8 to 32 characters |\r\n| `symbol` | string | Currency symbol traded on HitBTC exchange |\r\n| `side` | `buy`, `sell`| Order side  |\r\n| `quantity` | integer | Quantity, in lots | \r\n| `type` | `limit` or `market` | Order type. Only `limit` orders are currently supported |\r\n| `price`\t| decimal | Price, in currency units, consider price steps |\r\n| `timeInForce` | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill | Time in force |  |\r\n\r\n### <a name=\"OrderCancel\"/>OrderCancel\r\n\r\n<i>Example:</i>\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"OrderCancel\": {\r\n                \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n                \"cancelRequestClientOrderId\":   \"2c4d7127-6fbc-450c-b851-c6c1e8954545\",\r\n                \"symbol\": \"BTCUSD\",\r\n                \"side\": \"buy\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<i><i>Parameters:</i></i>\r\n\r\n| Parameter\t| Type | Description |\r\n| --- | --- | --- |\r\n| `clientOrderId` | string  | `clientOrderId` parameter sent in `NewOrder` message |\r\n| `cancelRequestClientOrderId` | string | Unqiue ID generated by client, from 8 to 32 characters |\r\n| `symbol` | string | Currency symbol traded on HitBTC exchange |\r\n| `side` |  `buy`, `sell`| Order side |\r\n| `type` | `limit` or `market` | Order type. Only `limit` orders are currently supported |\r\n\r\n\r\n### <a name=\"ExecutionReport\"/>ExecutionReport\r\n\r\n<i>Example:</i>\r\n\r\n```json\r\n{\r\n    \"ExecutionReport\":{\r\n        \"orderId\": \"64283442\",\r\n        \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n        \"execReportType\": \"new\",\r\n        \"orderStatus\": \"new\"\r\n        \"symbol\": \"BTCUSD\",\r\n        \"side\": \"buy\",\r\n        \"timestamp\": 1346691273926,\r\n        \"price\": 690.99,\r\n        \"quantity\": 0.1,\r\n        \"type\": \"limit\",\r\n        \"timeInForce\": \"GTC\"\r\n    }\r\n}\r\n```\r\n\r\nThe following fields are used in `ExecutionReport` object:\r\n\r\n| Field\t| Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `orderId` | Yes | string | Order ID on the Exchange|\r\n| `clientOrderId` | Yes | string | `clientOrderId` sent in `NewOrder` message (see [/api/1/trading/new_order](#neworder)) |\r\n| `execReportType` | Yes | `new` <br> `canceled` <br> `rejected` <br> `expired` <br> `trade` <br> `status` | Execution report type |\r\n| `orderStatus` | Yes | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `rejected` <br> `expired` | Order status |\r\n| `orderRejectReason` | Yes - for orders in `rejected` state| `unknownSymbol` <br> `exchangeClosed` <br>`orderExceedsLimit` <br> `unknownOrder` <br> `duplicateOrder` <br> `unsupportedOrder` <br> `unknownAccount` <br> `other`|Reason of rejection. Relevant only for orders in rejected state |\r\n| `symbol` | Yes | string, e.g. `BTCUSD` | Currency symbol traded on HitBTC exchange (see [Currency symbols](#cursymbols))|\r\n| `side` | Yes| `buy` or `sell` | Side of a trade |\r\n| `timestamp` | No | integer | UTC timestamp in milliseconds |\r\n| `price` | No | decimal | Price of an order|\r\n| `quantity` | Yes | integer | Order quantity in lots |\r\n| `type` | Yes| `limit` | Type of an order. Only `limit` orders are currently supported |\r\n| `timeInForce` | Yes | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day orders< | Time in force |\r\n| `tradeId` | Yes - for trades| integer | Trade ID on the exchange |\r\n| `lastQuantity` | Yes - for trades | integer | Last quantity |\r\n| `lastPrice` | Yes - for trades | decimal | Last price  |\r\n| `leavesQuantity` | No | integer |  Leaves quantity|\r\n| `cumQuantity` | No | integer | Cumulative quantity |\r\n| `averagePrice` | No | decimal | Average price. Equals 0 if `cumQuantity`=0|\r\n\r\n\r\n### <a name=\"CancelReject\"/>CancelReject\r\n\r\n<i>Example:</i>\r\n```json\r\n{\"CancelReject\": {\r\n    \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n    \"cancelRequestClientOrderId\": \"2c4d7127-6fbc-450c-b851\",\r\n    \"rejectReasonCode\": \"orderNotFound\",\r\n    \"rejectReasonText\": \"Order not found\",\r\n    \"timestamp\": 726892347829\r\n}}\r\n```\r\n\r\nThe following fields are used in `CancelReject` object:\r\n\r\n| Field\t| Required | Type | Description |\r\n| --- | --- | --- | --- |\r\n| `cancelRequestClientOrderId` | Yes | string | `cancelRequestClientOrderId` parameter from [`OrderCancel`](#ordercancel) |\r\n| `clientOrderId` | Yes | string | `clientOrderId` parameter from [`OrderCancel`](#ordercancel) |\r\n| `rejectReasonCode` | Yes | `orderNotFound` <br> `unknownSymbol` <br> `unknownUser` <br> `other` | Code of the reason why the order was cancelled|\r\n| `rejectReasonText` | No | string | Optional text explaining reject reason |\r\n\r\n\r\n## <a name=\"sample\"/>Sample code\r\n\r\n### Node.js snippet: message signature\r\n\r\n```javascript\r\n    var crypto = require('crypto');\r\n    \r\n    ...\r\n    \r\n    var msg = {\r\n        'apikey': apikey,\r\n        'signature': '',\r\n        'message': {\r\n            'nonce': nonce,\r\n            'payload': {\r\n                'NewOrder': {\r\n                    'clientOrderId': clientOrderId,\r\n                    'symbol': symbol,\r\n                    'side': side,\r\n                    'quantity': quantity,\r\n                    'type': type,\r\n                    'price': price,\r\n                    'timeInForce': timeInForce\r\n                }\r\n            }\r\n        }\r\n    };\r\n    msg.signature = crypto.createHmac('sha512', secretkey).update(JSON.stringify(msg.message)).digest('base64');\r\n    return JSON.stringify(msg);\r\n```\r\n","google":"UA-40524102-3","note":"Don't delete this file! It's used internally to help with page regeneration."}