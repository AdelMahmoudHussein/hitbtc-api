{"name":"hitbtc API","tagline":"We bring cutting-edge technology to the Bitcoin ecosystem","body":"## Summary\r\n\r\nThis document provides the complete reference for [hitbtc](https://hitbtc.com) API.\r\n\r\n\r\nThe following symbols are traded on hitbtc exchange.\r\n\r\n| Symbol\t| Lot size | Price step\r\n| --- | --- | --- |\r\n| BTCUSD |\t0.01 BTC |\t0.01 |\r\n| BTCEUR |\t0.01 BTC |\t0.01 |\r\n| LTCBTC | 0.1 LTC |\t0.00001 |\r\n| LTCUSD | 0.1 LTC |\t0.001 |\r\n| LTCEUR | 0.1 LTC |\t0.001 |\r\n| EURUSD | 1 EUR |\t0.0001 |\r\n| DOGEBTC | 1000 DOGE |\t0.000000001 |\r\n| XMRBTC | 0.01 XMR |\t0.01 |\r\n| BCNBTC | 100 BCN | 0.000000001 |\r\n| XDNBTC | 100 XDN | 0.000000001 |\r\n\r\n(/api/1/public/symbols returns an actual list of symbols)\r\n\r\nSize representation:\r\n* Size values in streaming messages are represented in lots.\r\n* Size values in RESTful market data are represented in money (e.g. in coins or in USD). \r\n* Size values in RESTful trade are represented in lots (e.g. 1 means 0.01 BTC for BTCUSD)\r\n\r\n### Demo trading\r\n\r\nHitbtc provides a demo trading option.  You can enable demo mode and acquire demo API keys on the Settings page.\r\n\r\n## Market data RESTful API\r\n\r\nEndpoint URL: [http://api.hitbtc.com](http://api.hitbtc.com)\r\n\r\nDemo endoint: [http://demo-api.hitbtc.com](http://demo-api.hitbtc.com)\r\n\r\n### /api/1/public/time\r\n\r\nRequest: `GET /api/1/public/time`\r\n\r\nExample: `/api/1/public/time`\r\n``` json\r\n{\r\n    \"timestamp\": 1393492619000\r\n}\r\n```\r\n\r\n### /api/1/public/symbols\r\n\r\nRequest: `GET /api/1/public/symbols`\r\n\r\nExample: `/api/1/public/symbols`\r\n``` json\r\n{\r\n    \"symbols\": [\r\n        {\r\n            \"symbol\": \"BTCUSD\",\r\n            \"step\": \"0.01\",\r\n            \"lot\": \"0.01\",\r\n        },\r\n        {\r\n            \"symbol\": \"BTCEUR\",\r\n            \"step\": \"0.01\",\r\n            \"lot\": \"0.01\",\r\n        },\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\n### /api/1/public/:symbol/ticker\r\n\r\nRequest: `GET /api/1/public/:symbol/ticker`\r\n\r\nExample: `/api/1/public/BTCUSD/ticker`\r\n\r\n``` json\r\n{\r\n    \"last\": \"550.73\",\r\n    \"bid\": \"549.56\",\r\n    \"ask\": \"554.12\",\r\n    \"high\": \"600.1\",\r\n    \"low\": \"400.7\",\r\n    \"volume\": \"567.9\",\r\n    \"timestamp\": 1393492619000\r\n}\r\n```\r\n\r\n* 24h means last 24h + last incomplete minute\r\n* high - highest trade price / 24 h\r\n* low - lowest trade price / 24 h\r\n* volume - volume / 24h\r\n\r\n### /api/1/public/:symbol/orderbook\r\n\r\nRequest: `GET /api/1/public/:symbol/orderbook`\r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| format_price | optional, \"string\" (default) or \"number\" | |\r\n| format_amount | optional, \"string\" (default) or \"number\" | |\r\n| format_amount_unit | optional, \"currency\" (default) or \"lot\" | |\r\n\r\nAlias: `/api/1/request/:symbol/orderbook.json` -> `/api/1/public/:symbol/orderbook?format_price=number&format_amount=number`\r\n\r\nExample: `/api/1/public/BTCUSD/orderbook`\r\n``` json\r\n{\r\n    \"asks\": [\r\n        [ \"405.71\", \"0.09\" ],\r\n        [ \"406.65\", \"0.06\" ],\r\n        [ \"409.51\", \"0.15\" ],\r\n        [ \"413.93\", \"51.6\" ],\r\n        [ \"414.59\", \"47.1\" ]\r\n    ],\r\n    \"bids\": [\r\n        [ \"398.3\", \"0.15\" ],\r\n        [ \"396.99\", \"0.13\" ],\r\n        [ \"395\", \"0.5\" ],\r\n        [ \"391.93\", \"42.4\" ],\r\n        [ \"383.67\", \"145.4\" ]\r\n    ]\r\n}\r\n```\r\n\r\nExample: `/api/1/public/BTCUSD/orderbook?format_price=number&format_amount=number`\r\n``` json\r\n{\r\n    \"asks\": [\r\n        [ 405.71, 0.09 ],\r\n        [ 406.65, 0.06 ],\r\n        [ 409.51, 0.15 ],\r\n        [ 413.93, 51.6 ],\r\n        [ 414.59, 47.1 ]\r\n    ],\r\n    \"bids\": [\r\n        [ 398.3, 0.15 ],\r\n        [ 396.99, 0.13 ],\r\n        [ 395, 0.5 ],\r\n        [ 391.93, 42.4 ],\r\n        [ 383.67, 145.4 ]\r\n    ]\r\n}\r\n```\r\n\r\n### /api/1/public/:symbol/trades\r\n\r\nRequest: `GET /api/1/public/:symbol/trades`\r\n\r\nParameters:\r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| from | required, int, trade_id or timestamp | returns trades with trade_id > specified trade_id <br> returns trades with timestamp >= specified timestamp |\r\n| till | optional, int, trade_id or timestamp | returns trades with trade_id < specified trade_id <br> returns trades with timestamp < specified timestamp |\r\n| by | required, filter and sort by `trade_id` or `ts` (timestamp) | |\r\n| sort | optional, `asc` (default) or `desc` | |\r\n| start_index | required, int | zero-based |\r\n| max_results | required, int, max value = 1000 | |\r\n| format_item | optional, \"array\" (default) or \"object\" |  |\r\n| format_price | optional, \"string\" (default) or \"number\" | |\r\n| format_amount | optional, \"string\" (default) or \"number\" | |\r\n| format_amount_unit | optional, \"currency\" (default) or \"lot\" | |\r\n| format_tid | optional, \"string\" or \"number\" (default) | |\r\n| format_timestamp | optional, \"millisecond\" (default) or \"second\" | |\r\n| format_wrap | optional, \"true\" (default) or \"false\" | |\r\n\r\nAlias: `/api/1/request/:symbol/trades.json?since=<trade_id>` -> `/api/1/public/:symbol/trades?from=<trade_id>&by=trade_id&start_index=0&format_numbers=number&format_tradeid=string&format_objects=object&format_timestamp=second`\r\n\r\nExample: `/api/1/public/BTCUSD/trades?from=0&by=trade_id&sort=desc&start_index=0&max_results=100`\r\n``` json\r\n{\r\n    \"trades\": [\r\n        [ 3814483, \"575.64\", \"0.02\", 1393492619000 ],\r\n        [ 3814482, \"574.3\", \"0.12\", 1393492619000 ],\r\n        [ 3814481, \"573.67\", \"3.8\", 1393492619000 ],\r\n        [ 3814479, \"571\", \"0.01\", 1393492619000 ],\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\n\r\nExample: `/api/1/public/BTCUSD/trades?from=0&by=trade_id&sort=desc&start_index=0&max_results=100&format_item=object&format_price=number&format_amount=number&format_tid=string&format_timestamp=second&format_wrap=false`\r\n``` json\r\n[\r\n    {\"date\": 1393492619, \"price\": 575.64, \"amount\": 0.02, \"tid\": \"3814483\"},\r\n    {\"date\": 1393492619, \"price\": 574.3, \"amount\": 0.12, \"tid\": \"3814482\"},\r\n    {\"date\": 1393492619, \"price\": 573.67, \"amount\": 3.8, \"tid\": \"3814481\"},\r\n    {\"date\": 1393492619, \"price\": 571, \"amount\": 0.01, \"tid\": \"3814479\"},\r\n    ...\r\n]\r\n```\r\n\r\n## Trading RESTful API\r\n\r\nBase URL: [https://api.hitbtc.com](https://api.hitbtc.com)\r\n\r\nDemo endoint: [http://demo-api.hitbtc.com](http://demo-api.hitbtc.com)\r\n\r\n### Authentication\r\n\r\nRESTful Trading API requires a HMAC-SHA512 signatures for each request.\r\n\r\nYou should get your API key and Secret key from the Settings page on [https://hitbtc.com](https://hitbtc.com) in order to use this API endpoint. \r\n\r\nEach request should include three parameters: `apikey`, `signature` and `nonce`.\r\n\r\n* `nonce` - unique monotonous number that should be generated on the client. Hint: use millisecond or microsecond timestamp for `nonce`. This parameter should be added as a query string parameter `nonce`. `nonce` should be < (2^53-1).\r\n* `apikey` - API key from Settings page. This parameter should be added as a query string parameter `apikey`.\r\n* `signature` - _lower-case_ hex representation of hmac-sha512 of concatenated `uri` and `postData`. This parameter should be added as a HTTP header `X-Signature`.\r\n\r\nSignture generation pseudo-code:\r\n\r\n```\r\nuri = path + '?' + query (example: /api/1/trading/orders/active?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d&symbols=EURUSD)\r\nmessage = uri + postData\r\nsignature = lower_case(hex(hmac_sha512(message, secret_key)))\r\n```\r\n\r\nJavascript code (example):\r\n``` js\r\n   var crypto = require('crypto');\r\n\r\n   ...\r\n\r\n   var signature = crypto.createHmac('sha512', secretKey).update(message).digest('hex');\r\n```\r\n\r\nCheck out examples that are provided by the community:\r\n* C# example code: https://gist.github.com/hitbtc-com/9808530\r\n* PHP example code: https://gist.github.com/hitbtc-com/10885873 \r\n\r\n### Error codes\r\n\r\nRESTful Trading API can return the following errors:\r\n\r\n| HTTP code | Text | Description |\r\n| --- | --- | --- |\r\n| 403 | Invalid apikey | API key doesn't exist or API key is currently used on another endpoint (max last 15 min) |\r\n| 403 | Nonce has been used | nonce is not monotonous |\r\n| 403 | Nonce is not valid | too big number or not a number |\r\n| 403 | Wrong signature | |\r\n\r\n### Execution reports\r\n\r\nThe API uses `ExecutionReport` as an object that represents change of order status.\r\n\r\nThe following fields are used in this object:\r\n\r\n| Field\t| Description | Type / Enum | Required |\r\n| --- | --- | --- | --- |\r\n| orderId | Order ID on the Exchange | string | required |\r\n| clientOrderId | clientOrderId sent in NewOrder message | string | required |\r\n| execReportType | execution report type | `new` <br> `canceled` <br> `rejected` <br> `expired` <br> `trade` <br> `status` | required |\r\n| orderStatus | order status | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `rejected` <br> `expired` | required |\r\n| orderRejectReason | Relevant only for the orders in rejected state | `unknownSymbol` <br> `exchangeClosed` <br>`orderExceedsLimit` <br> `unknownOrder` <br> `duplicateOrder` <br> `unsupportedOrder` <br> `unknownAccount` <br> `other`| for rejects |\r\n| symbol | | string, e.g. `BTCUSD` | required |\r\n| side | | `buy` or `sell` | required |\r\n| timestamp | UTC timestamp in milliseconds | | |\r\n| price | | decimal | |\r\n| quantity | | integer | required |\r\n| type | | only `limit` orders are currently supported | required |\r\n| timeInForce | time in force | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day orders< | required |\r\n| tradeId | Trade ID on the exchange | | for trades |\r\n| lastQuantity | | integer | for trades |\r\n| lastPrice | | decimal | for trades |\r\n| leavesQuantity | | integer |  |\r\n| cumQuantity | | integer | |\r\n| averagePrice | | decimal, will be 0 if 'cumQuantity'=0 | |\r\n\r\nExample:\r\n\r\n``` json\r\n{ \"ExecutionReport\": { \r\n   \"orderId\": \"5852103\",\r\n   \"clientOrderId\": \"11111112\",\r\n   \"execReportType\": \"new\",\r\n   \"orderStatus\": \"new\",\r\n   \"symbol\": \"BTCUSD\",\r\n   \"side\": \"buy\",\r\n   \"timestamp\": 1395236779235,\r\n   \"price\": 0.1,\r\n   \"quantity\": 100,\r\n   \"type\": \"limit\",\r\n   \"timeInForce\": \"GTC\",\r\n   \"lastQuantity\": 0,\r\n   \"lastPrice\": 0,\r\n   \"leavesQuantity\": 100,\r\n   \"cumQuantity\": 0,\r\n   \"averagePrice\": 0 \r\n} }\r\n```\r\n\r\n\r\n### /api/1/trading/balance\r\n\r\nRequest: `GET /api/1/trading/balance`\r\n\r\nSummary: returns trading balance.\r\n\r\nParameters: no parameters\r\n\r\nExample: \r\n``` json\r\n{\"balance\": [\r\n  {\r\n    \"currency_code\": \"BTC\",\r\n    \"cash\": 0.045457701,\r\n    \"reserved\": 0.01\r\n  },\r\n  {\r\n    \"currency_code\": \"EUR\",\r\n    \"cash\": 0.0445544,\r\n    \"reserved\": 0\r\n  },\r\n  {\r\n    \"currency_code\": \"LTC\",\r\n    \"cash\": 0.7,\r\n    \"reserved\": 0.1\r\n  },\r\n  {\r\n    \"currency_code\": \"USD\",\r\n    \"cash\": 2.9415029,\r\n    \"reserved\": 1.001\r\n  }\r\n]}\r\n```\r\n\r\n### /api/1/trading/orders/active\r\n\r\nRequest: `GET /api/1/trading/orders/active`\r\n\r\nSummary: returns all active orders (`new` or `partiallyFilled`).\r\n\r\nParameters: \r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| symbols | string, comma-delimeted list of symbols, optional, default - all symbols | |\r\n\r\nExample:\r\n\r\n``` json\r\n{\"orders\": [\r\n  {\r\n    \"orderId\": \"51521638\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1394798401494,\r\n    \"orderPrice\": 1000,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"cumQuantity\": 0,\r\n    \"clientOrderId\": \"7fb8756ec8045847c3b840e84d43bd83\",\r\n    \"symbol\": \"LTCBTC\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 0\r\n  }\r\n]}\r\n```\r\n\r\n### /api/1/trading/new_order\r\n\r\nRequest: `POST /api/1/trading/new_order`\r\n\r\nSummary: place a new order.\r\n\r\nParameters: \r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| clientOrderId | string, >=8 characters, <= 32 characters, required | unique order id generated by client |\r\n| symbol | string, required | e.g. `BTCUSD` |\r\n| side | `buy` or `sell`, required | |\r\n| price | decimal, required | order price, required for limit orders |\r\n| quantity | int | order quantity in lots |\r\n| type | `limit` or `market` | order type |\r\n| timeInForce | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day | use `GTC` by default |\r\n\r\nReturn value: returns a JSON object `ExecutionReport` that respresent a status of the order.\r\n\r\nExample:\r\n\r\n```\r\npost url: /api/1/trading/new_order?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d\r\npost data: clientOrderId=11111112&symbol=BTCUSD&side=buy&price=0.1&quantity=100&type=limit&timeInForce=GTC\r\n```\r\n\r\nExample response:\r\n``` json\r\n{ \"ExecutionReport\": \r\n   { \"orderId\": \"58521038\",\r\n     \"clientOrderId\": \"11111112\",\r\n     \"execReportType\": \"new\",\r\n     \"orderStatus\": \"new\",\r\n     \"symbol\": \"BTCUSD\",\r\n     \"side\": \"buy\",\r\n     \"timestamp\": 1395236779235,\r\n     \"price\": 0.1,\r\n     \"quantity\": 100,\r\n     \"type\": \"limit\",\r\n     \"timeInForce\": \"GTC\",\r\n     \"lastQuantity\": 0,\r\n     \"lastPrice\": 0,\r\n     \"leavesQuantity\": 100,\r\n     \"cumQuantity\": 0,\r\n     \"averagePrice\": 0 } }\r\n```\r\n\r\n### /api/1/trading/cancel_order\r\n\r\nRequest: `POST /api/1/trading/cancel_order`\r\n\r\nSummary: cancels an order.\r\n\r\nParameters: \r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| clientOrderId | string, >=8 characters, <= 32 characters, required | the same an in your order |\r\n| cancelRequestClientOrderId | string, >=8 characters, <= 32 characters, required | unqiue id generated by client |\r\n| symbol | string, required | the same an in your order |\r\n| side | `buy` or `sell`, required | the same an in your order |\r\n\r\nReturn values: could return `ExecutionReport` JSON object or `CancelReject` JSON object.\r\n\r\nExample:\r\n\r\n```\r\npost url: /api/1/trading/cancel_order?nonce=1395049771755&apikey=f6ab189hd7a2007e01d95667de3c493d\r\npost data: clientOrderId=11111112&cancelRequestClientOrderId=38257825798349578945&symbol=BTCUSD&side=buy\r\n```\r\n\r\nExample response:\r\n``` json\r\n{ \"ExecutionReport\": \r\n   { \"orderId\": \"58521038\",\r\n     \"clientOrderId\": \"11111112\",\r\n     \"execReportType\": \"canceled\",\r\n     \"orderStatus\": \"canceled\",\r\n     \"symbol\": \"BTCUSD\",\r\n     \"side\": \"buy\",\r\n     \"timestamp\": 1395236779346,\r\n     \"price\": 0.1,\r\n     \"quantity\": 100,\r\n     \"type\": \"limit\",\r\n     \"timeInForce\": \"GTC\",\r\n     \"lastQuantity\": 0,\r\n     \"lastPrice\": 0,\r\n     \"leavesQuantity\": 0,\r\n     \"cumQuantity\": 0,\r\n     \"averagePrice\": 0 } }\r\n```\r\n\r\n`CancelReject` example:\r\n\r\n``` json \r\n{ \"CancelReject\": { \r\n    \"cancelRequestClientOrderId\": \"011111112\",\r\n    \"clientOrderId\": \"11111112\",\r\n    \"rejectReasonCode\": \"orderNotFound\" \r\n} }\r\n```\r\n\r\n### /api/1/trading/trades\r\n\r\nRequest: `GET /api/1/trading/trades`\r\n\r\nSummary: returns an user's trading history.\r\n\r\nParameters: \r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| `by` | `trade_id` or `ts` (timestamp) | |\r\n| `start_index` | int, optional, default(0) | zero-based index |\r\n| `max_results` | int, required, <=1000 | |\r\n| `symbols` | string, comma-delimited | |\r\n| `sort` | `asc` (default) or `desc` | |\r\n| `from` | optional | start `trade_id` or `ts`, see `by` |\r\n| `till` | optional | end `trade_id` or `ts`, see `by` |\r\n\r\nReturn values: could return an array of user's trades.\r\n\r\nThe following fields are used in `trade` object:\r\n\r\n| Field\t| Description | Type / Enum |\r\n| --- | --- | --- |\r\n| `tradeId` | Trade ID on the exchange  | int, required | \r\n| `execPrice` | Trade price  | decimal, required | \r\n| `timestamp` |   | millisecond timestamp, required |\r\n| `originalOrderId` | Order ID on the exchange | |\r\n| `fee` | Fee for the trade | decimal, negative means rebate |\r\n| `clientOrderId` | Unique client-generated ID | string |\r\n| `symbol` | | string |\r\n| `side` | | `buy` or `sell` |\r\n| `execQuantity` | trade size, in lots | int |\r\n\r\nExample response:\r\n\r\n``` json\r\n{\"trades\": [\r\n  {\r\n    \"tradeId\": 39,\r\n    \"execPrice\": 150,\r\n    \"timestamp\": 1395231854030,\r\n    \"originalOrderId\": \"114\",\r\n    \"fee\": 0.03,\r\n    \"clientOrderId\": \"FTO18jd4ou41--25\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 38,\r\n    \"execPrice\": 140.1,\r\n    \"timestamp\": 1395231853882,\r\n    \"originalOrderId\": \"112\",\r\n    \"fee\": 0.028,\r\n    \"clientOrderId\": \"FTO18jd4ou3n--15\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 2,\r\n    \"execPrice\": 150,\r\n    \"timestamp\": 1394789991659,\r\n    \"originalOrderId\": \"24\",\r\n    \"fee\": 0.03,\r\n    \"clientOrderId\": \"FTO18ivvcbvt--25\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 10\r\n  },\r\n  {\r\n    \"tradeId\": 1,\r\n    \"execPrice\": 140,\r\n    \"timestamp\": 1394789991527,\r\n    \"originalOrderId\": \"22\",\r\n    \"fee\": 0.028,\r\n    \"clientOrderId\": \"FTO18ivvcbvj--15\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 10\r\n  }\r\n]}\r\n```\r\n\r\n### /api/1/trading/orders/recent\r\n\r\nRequest: `GET /api/1/trading/orders/recent`\r\n\r\nSummary: returns an user's recent orders (for last 24 hours) sorted by order update time.\r\n\r\nParameters: \r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| `start_index` | int, optional, default(0) | zero-based index |\r\n| `max_results` | int, required, <=1000 | |\r\n| `sort` | `asc` or `desc` (`asc` by default) | |\r\n| `symbols` | string, comma-delimited | |\r\n| `statuses` | string, comma-delimited, `new`, `partiallyFilled`, `filled`, `canceled`, `expired`, `rejected` | |\r\n\r\nReturn values: returns an array of user's recent orders.\r\n\r\nThe following fields are used in `order` object:\r\n\r\n| Field\t| Description | Type / Enum |\r\n| --- | --- | --- |\r\n| `orderId` | Order ID on the exchange | |\r\n| `orderStatus` |  | `new`, `partiallyFilled`, `filled`, `canceled`, `expired`, `rejected` |\r\n| `lastTimestamp` | last change  | millisecond timestamp, required |\r\n| `orderPrice` | Order price  | decimal, required for limit orders | \r\n| `orderQuantity` | Order quantity in lots | int, required | \r\n| `avgPrice` | Avg. price  | decimal | \r\n| `quantityLeaves` | Remaining quantity in lots | int, required | \r\n| `type` |  | `limit` or `market` |\r\n| `timeInForce` | | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill<br>`DAY` - day |\r\n| `clientOrderId` | Unique client-generated ID | string |\r\n| `symbol` | | string |\r\n| `side` | | `buy` or `sell` |\r\n| `execQuantity` | last executed quantity in lots | int |\r\n\r\nExample response:\r\n\r\n``` json\r\n{\"orders\": [\r\n  {\r\n    \"orderId\": \"1\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1395659434845,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111111\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 0\r\n  },\r\n  {\r\n    \"orderId\": \"2\",\r\n    \"orderStatus\": \"new\",\r\n    \"lastTimestamp\": 1395664550770,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111112\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"sell\",\r\n    \"execQuantity\": 0\r\n  },\r\n  {\r\n    \"orderId\": \"3\",\r\n    \"orderStatus\": \"canceled\",\r\n    \"lastTimestamp\": 1395664737500,\r\n    \"orderPrice\": 1,\r\n    \"orderQuantity\": 1,\r\n    \"avgPrice\": 0,\r\n    \"quantityLeaves\": 1,\r\n    \"type\": \"limit\",\r\n    \"timeInForce\": \"GTC\",\r\n    \"clientOrderId\": \"111111111111111111111113\",\r\n    \"symbol\": \"BTCUSD\",\r\n    \"side\": \"buy\",\r\n    \"execQuantity\": 0\r\n  }\r\n]}\r\n```\r\n\r\n## Payment RESTful API\r\n\r\nBase URL: [https://api.hitbtc.com](https://api.hitbtc.com)\r\n\r\nDemo endoint: the Payment API is not available in demo mode.\r\n\r\n### /api/1/payment/balance\r\n\r\nRequest: `GET /api/1/payment/balance`\r\n\r\nSummary: returns a balance of the main account.\r\n\r\nParameters: no parameters\r\n\r\nReturn values: returns multi-currency balance of the main account.\r\n\r\nExample response:\r\n\r\n``` json\r\n{\"balance\": [{\"currency_code\": \"USD\", \"balance\": 13.12}, {\"currency_code\": \"EUR\", \"balance\": 0}, {\"currency_code\": \"LTC\", \"balance\": 1.07}, {\"currency_code\": \"BTC\", \"balance\": 11.9}]}\r\n```\r\n\r\n### /api/1/payment/transfer_*\r\n\r\nRequest: `POST /api/1/payment/transfer_to_trading, /api/1/payment/transfer_to_main`\r\n\r\nSummary: transfer funds between main and trading accounts.\r\n\r\nParameters:\r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| `amount` | decimal, required | amount |\r\n| `currency_code` | string, required, e.g. `BTC` | |\r\n\r\nReturn values: returns a transaction id or an error.\r\n\r\nExample responses:\r\n\r\n```json\r\n{\"message\": \"Balance not enough\", \"statusCode\": 409, \"body\": \"Balance not enough\"}\r\n```\r\n\r\n```json\r\n{\"transaction\": \"52976-103925-18443984\"}\r\n```\r\n\r\n### /api/1/payment/address/\r\n\r\nRequest: `GET /api/1/payment/address/:currency`\r\n\r\nExample request: `GET /api/1/payment/address/BTC`\r\n\r\nSummary: returns the last created incoming cryptocurrency address\r\n\r\nParameters: no parameters\r\n\r\nReturn values: returns an address that can be used to deposit cryptocurrency.\r\n\r\nExample response:\r\n\r\n```json\r\n{\"address\":\"1HDtDgG9HYpp1YJ6kFYSB6NgaG2haKnxUH\"}\r\n```\r\n\r\n### /api/1/payment/address/\r\n\r\nRequest: `POST /api/1/payment/address/:currency`\r\n\r\nExample request: `POST /api/1/payment/address/BTC`\r\n\r\nSummary: creates a incoming new cryptocurrency address.\r\n\r\nParameters: no parameters\r\n\r\nReturn values: returns an address that can be used to deposit cryptocurrency.\r\n\r\nExample response:\r\n\r\n```json\r\n{\"address\":\"1HDtDgG9HYpp1YJ6kFYSB6NgaG2haKnxUH\"}\r\n```\r\n\r\n### /api/1/payment/payout\r\n\r\nRequest: `POST /api/1/payment/payout`\r\n\r\nSummary: withdraws money and creates an outgoing crypotocurrency transaction.\r\n\r\nParameters:\r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| `amount` | decimal, required | amount |\r\n| `currency_code` | string, required, e.g. `BTC` | |\r\n| `address` | string, required | BTC/LTC address |\r\n\r\nExample: ```amount=0.001&currency_code=BTC&address=1LuWvENyuPNHsHWjDgU1QYKWUYN9xxy7n5```\r\n\r\nReturn values: returns a transaction id on the exchange or an error.\r\n\r\nExample response:\r\n```json\r\n{\"transaction\": \"51545-103004-18442681\"}\r\n```\r\n\r\n### /api/1/payment/transactions\r\n\r\nRequest: `GET /api/1/payment/transactions`\r\n\r\nSummary: return a list of payment transactions and their statuses.\r\n\r\nParameters:\r\n\r\n| Parameter | Type | Description |\r\n| --- | --- | --- |\r\n| `offset` | int, optional, default = 0 | start index for the query |\r\n| `limit` | int, required | max results for the query |\r\n| `dir` | string, optional, `ask` or `desc` default = `desc` | sort direction |\r\n\r\nResponse: array of transactions.\r\n\r\nExample response:\r\n```json\r\n{\"transactions\": [\r\n  {\r\n    \"id\": \"49720-104765-18440728\",\r\n    \"type\": \"payin\",\r\n    \"status\": \"pending\",\r\n    \"created\": 1397056648,\r\n    \"finished\": 1397056646,\r\n    \"amount_from\": 0.001,\r\n    \"currency_code_from\": \"BTC\",\r\n    \"amount_to\": 0.001,\r\n    \"currency_code_to\": \"BTC\",\r\n    \"destination_data\": null,\r\n    \"commission_percent\": 0,\r\n    \"bitcoin_address\": \"1KnVXD1Wc1wZbTHiB1TDgMcnSRi2PnMHAV\",\r\n    \"bitcoin_return_address\": \"1QBuhFksjoWTQWJKWUPyQ37wsQohLAhJvK\"\r\n  }\r\n]}\r\n```\r\n\r\n## socket.io Market Data\r\n\r\nThe socket.io market data based on socket.io protocol and supports WebSocket, xhr-polling and jsonp-polling transports. API works on socket.io version 1.0.x\r\n\r\nThe API support multiplexing a single connection with socket.io namespaces. \r\n\r\nPlease refer to official socket.io documentation on http://socket.io/.  \r\n\r\nSocket.io URL: `http://api.hitbtc.com:8081`\r\n\r\nSocket.io demo URL: `http://demo-api.hitbtc.com:8081`\r\n\r\n### `trades` namespace\r\n\r\nNamespace: `trades`\r\n\r\nURLs: `/trades/:symbol` e.g. `/trades/BTCUSD`\r\n\r\nEvent: `trade`\r\n\r\nEvent example:\r\n```json\r\n{\"price\":478.33,\"amount\":0.15}\r\n```\r\n\r\nLive example (both demo and primary api): http://jsfiddle.net/rn7zy75n/1/\r\n\r\n## Market data streaming end-point\r\n\r\nStreaming API is based on [WebSocket protocol](http://en.wikipedia.org/wiki/WebSocket). All messages are in JSON format.\r\n\r\nURL: [ws://api.hitbtc.com](ws://api.hitbtc.com)\r\n\r\nDemo URL: [ws://demo-api.hitbtc.com]ws://demo-api.hitbtc.com)\r\n\r\nOnce client connects to this URL the session is started. \r\n\r\nThe server broadcasts the following types of messages:\r\n\r\n* [MarketDataSnapshotFullRefresh](#MarketDataSnapshotFullRefresh) message contains a full snapshot of the order book.\r\n* [MarketDataIncrementalRefresh](#MarketDataIncrementalRefresh) message contains incremental changes\r\n\r\nSome recommendations to consider:\r\n\r\n* The application could receive the first snapshot and maintain the order book by applying incremental updates.\r\n* It's recommended to invalidate a state of the application periodically using snapshots.\r\n* It's recommended to check sequence numbers and to drop updates with non-monotonous sequence numbers.\r\n\r\n<a name=\"MarketDataSnapshotFullRefresh\"/>\r\n### MarketDataSnapshotFullRefresh\r\n\r\nMarketDataSnapshotFullRefresh message contains a full snapshot of the order book.\r\n\r\nExample message:\r\n```json\r\n{\"MarketDataSnapshotFullRefresh\": {\r\n    \"snapshotSeqNo\": 899009,\r\n    \"symbol\": \"BTCUSD\",\r\n    \"exchangeStatus\": \"working\",\r\n    \"ask\": [\r\n        {http://jsfiddle.net/He6AU/13/\r\n            \"price\": 101.42,\r\n            \"size\": 7\r\n        },\r\n        {\r\n            \"price\": 101.85,\r\n            \"size\": 5\r\n        },\r\n        {\r\n            \"price\": 102.59,\r\n            \"size\": 1\r\n        },\r\n        {\r\n            \"price\": 114.53,\r\n            \"size\": 3\r\n        },\r\n        {\r\n            \"price\": 114.54,\r\n            \"size\": 6\r\n        },\r\n        {\r\n            \"price\": 114.55,\r\n            \"size\": 19\r\n        }\r\n    ],\r\n    \"bid\": [\r\n        {\r\n            \"price\": 89.72,\r\n            \"size\": 79\r\n        },\r\n        {\r\n            \"price\": 89.71,\r\n            \"size\": 158\r\n        },\r\n        {\r\n            \"price\": 89.7,\r\n            \"size\": 166\r\n        },\r\n        {\r\n            \"price\": 89.69,\r\n            \"size\": 231\r\n        },\r\n        {\r\n            \"price\": 89.68,\r\n            \"size\": 169\r\n        },\r\n        {\r\n            \"price\": 89.67,\r\n            \"size\": 186\r\n        },\r\n        {\r\n            \"price\": 89.66,\r\n            \"size\": 178\r\n        }\r\n    ]\r\n}}\r\n```\r\n\r\nFields:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| seqNo | monotone increasing number, each symbol has an own sequence |\r\n| timestamp | millisecond timestamp UTC |\r\n| symbol | |\r\n| exchangeStatus | `on` or `off`, `off` means the trading is suspended |\r\n| ask, bid | sorted arrays of price levels in the order book; full snapshot (all price levels) is provided |\r\n\r\n<a name=\"MarketDataIncrementalRefresh\"/>\r\n### MarketDataIncrementalRefresh\r\n\r\nMarketDataIncrementalRefresh contains incremental changes of the order book and individual trades.\r\n\r\nExample message:\r\n```json\r\n{\"MarketDataIncrementalRefresh\": {\r\n    \"seqNo\": 546693,\r\n    \"timestamp\": 1381394357861,\r\n    \"symbol\": \"BTCUSD\",\r\n    \"exchangeStatus\": \"on\",\r\n    \"ask\": [],\r\n    \"bid\": [\r\n        {\r\n            \"price\": 100.98,\r\n            \"size\": 3\r\n        }\r\n    ],\r\n    \"trade\": [\r\n        {\r\n            \"price\": 100.98,\r\n            \"size\": 5,\r\n            \"timestamp\": 1346691273926\r\n        }\r\n    ]\r\n}}\r\n```\r\n\r\nFields:\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| seqNo\t| monotone increasing number, each symbol has an own sequence\r\n| timestamp |\tmillisecond timestamp UTC |\r\n| symbol\t| |\r\n| exchangeStatus |  `on` or `off`, `off` means the trading is suspended |\r\n| ask, bid, trade | an array of changes in the order book; <br> `size` means new size, `size`=0 means price level has been removed |\r\n\r\n## Trading streaming end-point\r\n\r\nStreaming API is based on [WebSocket protocol](http://en.wikipedia.org/wiki/WebSocket). All messages are in JSON format.\r\n\r\nURL: <wss://api.hitbtc.com:8080>\r\n\r\nDemo URL: <ws://demo-api.hitbtc.com:8080>\r\n\r\nTrading endpoint requires sending login message after connection esteblished. All client messages should be signed and should contain valid and active API key\r\n\r\nThe following message types are supported:\r\n\r\n| Type |  |\r\n| --- | --- | --- |\r\n| [Login](#Login) | Client -> Server |\r\n| [NewOrder](#NewOrder) | Client -> Server |\r\n| [OrderCancel](#OrderCancel) | Client -> Server  |\r\n| [ExecutionReport](#ExecutionReport) | Server -> Client |\r\n| [CancelReject](#CancelReject) | Server -> Client |\r\n\r\n\r\n### API keys and message signatures\r\n\r\nAll client messages should be signed in the following manner:\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"Login\": {}\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n| Field | Description |\r\n| --- | --- |\r\n| nonce | should be monotonous within the same connection |\r\n| signature | base64 [hmac-sha512](http://en.wikipedia.org/wiki/Hash-based_message_authentication_code)(binary representation of the message) |\r\n\r\n<a name=\"Login\"/>\r\n### Login \r\n\r\nExample:\r\n```json\r\n{\r\n\t\"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n\t\"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n\t\"message\":{\r\n\t\t\"nonce\": 12, \r\n\t\t\"payload\": {\r\n\t\t\t\"Login\": {}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nParameters: no parameters\r\n\r\nIf client doesn't send valid logon message in 10 second the connection will be dropped.\r\n\r\n<a name=\"NewOrder\"/>\r\n### NewOrder\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"NewOrder\": {\r\n                \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n                \"symbol\": \"BTCUSD\",\r\n                \"side\": \"buy\",\r\n                \"quantity\": 10,\r\n                \"type\": \"limit\",\r\n                \"price\": 788.12,\r\n                \"timeInForce\": \"GTC\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nParameters:\r\n\r\n| Parameter\t| Description | Type / Enum |\r\n| --- | --- | --- |\r\n| clientOrderId | should be unique, <= 32 characters | |\r\n| symbol | | |\r\n| side | order side | `buy`, `sell` |\r\n| quantity | quantity in lots | integer |\r\n| type | order type\t| only `limit` orders are currently supported |\r\n| price\t| price (in currency) | decimal, consider price steps |\r\n| timeInForce | time in force | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill |\r\n\r\n<a name=\"OrderCancel\"/>\r\n### OrderCancel\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n    \"apikey\": \"e418f5b4a15608b78185540ef583b9fc\",\r\n    \"signature\": \"FN6/9dnMfLh3wZj+cAFr82HcSvmwuniMQqUlRxSQ9WxRqFpYrjY2xlvDzLC5+qSZAHts8R7KR7HbjiI3SzVxHg==\",\r\n    \"message\":{\r\n        \"nonce\": 12,\r\n        \"payload\": {\r\n            \"OrderCancel\": {\r\n                \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n                \"cancelRequestClientOrderId\":   \"2c4d7127-6fbc-450c-b851-c6c1e8954545\",\r\n                \"symbol\": \"BTCUSD\",\r\n                \"side\": \"buy\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nParameters:\r\n\r\n| Parameter\t| Description | Type / Enum |\r\n| --- | --- | --- |\r\n| clientOrderId | clientOrderId sent in NewOrder message | |\r\n| cancelRequestClientOrderId | <= 32 characters | |\r\n| symbol | | |\r\n| side | order side | `buy`, `sell` |\r\n| type | order type\t| only `limit` orders are currently supported |\r\n\r\n<a name=\"ExecutionReport\"/>\r\n### ExecutionReport\r\n\r\nExample:\r\n\r\n```json\r\n{\r\n    \"ExecutionReport\":{\r\n        \"orderId\": \"64283442\",\r\n        \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n        \"execReportType\": \"new\",\r\n        \"orderStatus\": \"new\"\r\n        \"symbol\": \"BTCUSD\",\r\n        \"side\": \"buy\",\r\n        \"timestamp\": 1346691273926,\r\n        \"price\": 690.99,\r\n        \"quantity\": 0.1,\r\n        \"type\": \"limit\",\r\n        \"timeInForce\": \"GTC\"\r\n    }\r\n}\r\n```\r\n\r\nFields:\r\n\r\n| Field\t| Description | Type / Enum | Required |\r\n| --- | --- | --- | --- |\r\n| orderId | Order ID on the Exchange | string | required |\r\n| clientOrderId | clientOrderId sent in NewOrder message | string | required |\r\n| execReportType | execution report type | `new` <br> `canceled` <br> `rejected` <br> `expired` <br> `trade` <br> `status` | required |\r\n| orderStatus | order status | `new` <br> `partiallyFilled` <br> `filled` <br> `canceled` <br> `rejected` <br> `expired` | required |\r\n| orderRejectReason | Relevant only for the orders in rejected state | `unknownSymbol` <br> `exchangeClosed` <br>`orderExceedsLimit` <br> `unknownOrder` <br> `duplicateOrder` <br> `unsupportedOrder` <br> `unknownAccount` <br> `other`| |\r\n| symbol | | | required |\r\n| side | | `buy` or `sell` | required |\r\n| timestamp | UTC timestamp in milliseconds | | |\r\n| price | | decimal | |\r\n| quantity | | integer | required |\r\n| type | | only `limit` orders are currently supported | required |\r\n| timeInForce | time in force | `GTC` - Good-Til-Canceled <br>`IOC` - Immediate-Or-Cancel<br>`FOK` - Fill-Or-Kill | required |\r\n| tradeId | Trade ID on the exchange | | for trades |\r\n| lastQuantity | | integer | for trades |\r\n| lastPrice | | decimal | for trades |\r\n| leavesQuantity | | integer |  |\r\n| cumQuantity | | integer | |\r\n| averagePrice | | decimal, will be 0 if 'cumQuantity'=0 | |\r\n\r\n<a name=\"CancelReject\"/>\r\n### CancelReject\r\n\r\nExample:\r\n```json\r\n{\"CancelReject\": {\r\n    \"clientOrderId\": \"68f82819-723a-4b60-ad6b\",\r\n    \"cancelRequestClientOrderId\": \"2c4d7127-6fbc-450c-b851\",\r\n    \"rejectReasonCode\": \"orderNotFound\",\r\n    \"rejectReasonText\": \"Order not found\",\r\n    \"timestamp\": 726892347829\r\n}}\r\n```\r\n\r\nFields:\r\n\r\n| Field\t| Description | Type / Enum | Required |\r\n| --- | --- | --- | --- |\r\n| cancelRequestClientOrderId | `cancelRequestClientOrderId` from OrderCancel | string | required |\r\n| clientOrderId | `clientOrderId` from OrderCancel | string | required |\r\n| rejectReasonCode | | `orderNotFound` <br> `unknownSymbol` <br> `unknownUser` <br> `other` | required |\r\n| rejectReasonText | Optional reject reason text | string | |\r\n\r\n## Useful tools\r\n\r\nChrome extension Simple WebSocket Client (https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo)\r\n\r\n## Sample code\r\n\r\n### Node.js snippet: message signature\r\n\r\n```javascript\r\n    var crypto = require('crypto');\r\n    \r\n    ...\r\n    \r\n    var msg = {\r\n        'apikey': apikey,\r\n        'signature': '',\r\n        'message': {\r\n            'nonce': nonce,\r\n            'payload': {\r\n                'NewOrder': {\r\n                    'clientOrderId': clientOrderId,\r\n                    'symbol': symbol,\r\n                    'side': side,\r\n                    'quantity': quantity,\r\n                    'type': type,\r\n                    'price': price,\r\n                    'timeInForce': timeInForce\r\n                }\r\n            }\r\n        }\r\n    };\r\n    msg.signature = crypto.createHmac('sha512', secretkey).update(JSON.stringify(msg.message)).digest('base64');\r\n    return JSON.stringify(msg);\r\n```\r\n\r\n\r\n","google":"UA-40524102-3","note":"Don't delete this file! It's used internally to help with page regeneration."}